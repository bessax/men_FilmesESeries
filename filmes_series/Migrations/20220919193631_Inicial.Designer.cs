// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using filmes_series.data.context;

#nullable disable

namespace filmes_series.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20220919193631_Inicial")]
    partial class Inicial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("AtorFilme", b =>
                {
                    b.Property<int>("ElencoFilmeId")
                        .HasColumnType("int");

                    b.Property<int>("ProducaoFilmeId")
                        .HasColumnType("int");

                    b.HasKey("ElencoFilmeId", "ProducaoFilmeId");

                    b.HasIndex("ProducaoFilmeId");

                    b.ToTable("AtorFilme");
                });

            modelBuilder.Entity("AtorSerie", b =>
                {
                    b.Property<int>("ElencoSerieId")
                        .HasColumnType("int");

                    b.Property<int>("ProducaoSerieId")
                        .HasColumnType("int");

                    b.HasKey("ElencoSerieId", "ProducaoSerieId");

                    b.HasIndex("ProducaoSerieId");

                    b.ToTable("AtorSerie");
                });

            modelBuilder.Entity("filmes_series.domain.entity.Ator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Atores");
                });

            modelBuilder.Entity("filmes_series.domain.entity.Categoria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Categorias");
                });

            modelBuilder.Entity("filmes_series.domain.entity.Filme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CategoriaId")
                        .HasColumnType("int");

                    b.Property<string>("Classificacao")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("DataLancamento")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Diretor")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Estudio")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaId");

                    b.ToTable("Filmes");
                });

            modelBuilder.Entity("filmes_series.domain.entity.Serie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CategoriaId")
                        .HasColumnType("int");

                    b.Property<string>("Classificacao")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("DataEncerramento")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DataLancamento")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Diretor")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Estudio")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("Temporadas")
                        .HasMaxLength(255)
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaId");

                    b.ToTable("Series");
                });

            modelBuilder.Entity("filmes_series.Domain.Entity.UserApp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("UserApps");
                });

            modelBuilder.Entity("AtorFilme", b =>
                {
                    b.HasOne("filmes_series.domain.entity.Ator", null)
                        .WithMany()
                        .HasForeignKey("ElencoFilmeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("filmes_series.domain.entity.Filme", null)
                        .WithMany()
                        .HasForeignKey("ProducaoFilmeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AtorSerie", b =>
                {
                    b.HasOne("filmes_series.domain.entity.Ator", null)
                        .WithMany()
                        .HasForeignKey("ElencoSerieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("filmes_series.domain.entity.Serie", null)
                        .WithMany()
                        .HasForeignKey("ProducaoSerieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("filmes_series.domain.entity.Filme", b =>
                {
                    b.HasOne("filmes_series.domain.entity.Categoria", "Categoria")
                        .WithMany()
                        .HasForeignKey("CategoriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Categoria");
                });

            modelBuilder.Entity("filmes_series.domain.entity.Serie", b =>
                {
                    b.HasOne("filmes_series.domain.entity.Categoria", "Categoria")
                        .WithMany()
                        .HasForeignKey("CategoriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Categoria");
                });
#pragma warning restore 612, 618
        }
    }
}
